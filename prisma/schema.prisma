generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  devices       Device[]
  notifications Notification[]
  swaps         Swap[]
  userAccounts  UserAccount[]

  @@map("users")
}

model UserAccount {
  id        String   @id @default(cuid())
  accountId String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, accountId])
  @@map("user_accounts")
}

model Device {
  id            String         @id @default(cuid())
  deviceToken   String         @unique
  deviceType    DeviceType
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@map("devices")
}

model Swap {
  id                               String         @id @default(cuid())
  swapId                           String         @unique
  sellAsset                        String
  buyAsset                         String
  sellAmountCryptoBaseUnit         String
  expectedBuyAmountCryptoBaseUnit  String
  sellAmountCryptoPrecision        String
  expectedBuyAmountCryptoPrecision String
  actualBuyAmountCryptoPrecision   String?
  status                           SwapStatus     @default(PENDING)
  source                           String
  swapperName                      String
  sellAccountId                    String
  buyAccountId                     String?
  receiveAddress                   String?
  sellTxHash                       String?
  buyTxHash                        String?
  txLink                           String?
  statusMessage                    String?
  isStreaming                      Boolean        @default(false)
  estimatedCompletion              DateTime?
  createdAt                        DateTime       @default(now())
  updatedAt                        DateTime       @updatedAt
  metadata                         String
  chainflipSwapId                  Int?
  relayTransactionMetadata         String?
  relayerExplorerTxLink            String?
  relayerTxHash                    String?
  stepIndex                        Int            @default(0)
  streamingSwapMetadata            String?
  userId                           String
  notifications                    Notification[]
  user                             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("swaps")
}

model Notification {
  id          String           @id @default(cuid())
  title       String
  body        String
  type        NotificationType
  isRead      Boolean          @default(false)
  sentAt      DateTime         @default(now())
  deliveredAt DateTime?
  userId      String
  deviceId    String?
  swapId      String?
  device      Device?          @relation(fields: [deviceId], references: [id])
  swap        Swap?            @relation(fields: [swapId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum DeviceType {
  MOBILE
  WEB
}

enum SwapStatus {
  IDLE
  PENDING
  SUCCESS
  FAILED
}

enum NotificationType {
  SWAP_STATUS_UPDATE
  SWAP_COMPLETED
  SWAP_FAILED
}
